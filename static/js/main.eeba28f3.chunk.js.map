{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","useState","isLoading","changeLoading","companies","updateCompanies","displayedCompanies","changeDisplayedCompanies","displayedElementsNumber","changeDisplayedElementsNumber","offset","changeOffset","useEffect","axios","get","then","res","data","catch","err","console","log","selectedCompanies","sort","a","b","id","slice","all","map","elem","spread","responses","companiesData","updatedCompanies","companyToUpdate","find","company","sum","incomes","income","value","reduce","prev","curr","parseFloat","Object","assign","suma","avrg","length","errors","className","onChange","event","parseInt","target","key","Number","toFixed","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kOA6HeA,MA1Hf,WAAgB,IAAD,EACwBC,oBAAS,GADjC,mBACJC,EADI,KACOC,EADP,OAE0BF,mBAAS,IAFnC,mBAEJG,EAFI,KAEOC,EAFP,OAG4CJ,mBAAS,IAHrD,mBAGJK,EAHI,KAGgBC,EAHhB,OAIsDN,mBAC7D,IALO,mBAIJO,EAJI,KAIqBC,EAJrB,OAOoBR,mBAAS,GAP7B,mBAOJS,EAPI,KAOIC,EAPJ,KA2EX,OAlEAC,qBAAU,WACNC,IACKC,IADL,gDAEKC,MAAK,SAACC,GACHX,EAAgBW,EAAIC,MACpBV,EAAyBS,EAAIC,MAC7Bd,GAAc,MAEjBe,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAErB,IAEHP,qBAAU,WACN,IAAMU,EAAoBlB,EACrBmB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,GAAKD,EAAEC,MACxBC,MAAMjB,EAAQA,EAASF,GAE5BK,IACKe,IACGN,EAAkBO,KAAI,SAACC,GAAD,OAClBjB,IAAMC,IAAN,qDACkDgB,EAAKJ,SAI9DX,KACGF,IAAMkB,QAAO,WAAmB,IAAD,uBAAdC,EAAc,yBAAdA,EAAc,gBAC3B,IAAMC,EAAa,UAAOD,GAEpBE,EAAmBD,EAAcJ,KAAI,SAACC,GACxC,IAAMK,EAAkBb,EAAkBc,MACtC,SAACC,GAAD,OAAaA,EAAQX,KAAOI,EAAKb,KAAKS,MAOpCY,EAJeR,EAAKb,KAAKsB,QAAQV,KACnC,SAACW,GAAD,OAAYA,EAAOC,SAGEC,QACrB,SAACC,EAAMC,GAAP,OAAgBC,WAAWF,GAAQE,WAAWD,MAalD,OAVAxB,QAAQC,IAAI,gBAAiBS,EAAKb,MAKlB6B,OAAOC,OAAOZ,EAAiB,CAC3Ca,KAAMV,EACNW,KAAMX,EAAMR,EAAKb,KAAKsB,QAAQW,YAMtC3C,EAAyB2B,OAGhChB,OAAM,SAACiC,SAGb,CAAC/C,EAAWM,EAAQF,IAEvBY,QAAQC,IAAI,SAAUf,GAGlB,yBAAK8C,UAAU,OACX,8CAEI,4BACIC,SAAU,SAACC,GAAD,OACN7C,EACI8C,SAASD,EAAME,OAAOf,SAG9BA,MAAOjC,GAEP,4BAAQiC,MAAO,GAAf,KACA,4BAAQA,MAAO,IAAf,MACA,4BAAQA,MAAO,IAAf,QAIPvC,GAAa,wCACZA,GACEI,EAAmBuB,KAAI,SAACC,GAAD,OACnB,uBAAG2B,IAAK3B,EAAKJ,IAAb,MACQI,EAAKJ,GADb,YAC0BgC,OAAO5B,EAAKkB,MAAMW,QAAQ,GAAI,IADxD,iBAEcD,OAAO5B,EAAKmB,MAAMU,QAAQ,OAIhD,6BACI,4BACIC,QAAS,kBACLjD,EAAaD,EAASF,KAF9B,WAKaA,GAEb,4BACIoD,QAAS,kBACLjD,EAAaD,EAASF,KAF9B,WAKaA,MC1GTqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdzD,OAAM,SAAA0D,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.eeba28f3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n    const [isLoading, changeLoading] = useState(true);\n    const [companies, updateCompanies] = useState([]);\n    const [displayedCompanies, changeDisplayedCompanies] = useState([]);\n    const [displayedElementsNumber, changeDisplayedElementsNumber] = useState(\n        10\n    );\n    const [offset, changeOffset] = useState(0);\n\n    useEffect(() => {\n        axios\n            .get(`https://recruitment.hal.skygate.io/companies`)\n            .then((res) => {\n                updateCompanies(res.data);\n                changeDisplayedCompanies(res.data);\n                changeLoading(false);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, []);\n\n    useEffect(() => {\n        const selectedCompanies = companies\n            .sort((a, b) => a.id - b.id)\n            .slice(offset, offset + displayedElementsNumber);\n\n        axios\n            .all(\n                selectedCompanies.map((elem) =>\n                    axios.get(\n                        `https://recruitment.hal.skygate.io/incomes/${elem.id}`\n                    )\n                )\n            )\n            .then(\n                axios.spread((...responses) => {\n                    const companiesData = [...responses];\n\n                    const updatedCompanies = companiesData.map((elem) => {\n                        const companyToUpdate = selectedCompanies.find(\n                            (company) => company.id === elem.data.id\n                        );\n\n                        const sumOfIncomes = elem.data.incomes.map(\n                            (income) => income.value\n                        );\n\n                        const sum = sumOfIncomes.reduce(\n                            (prev, curr) => parseFloat(prev) + parseFloat(curr)\n                        );\n\n                        console.log(\"element month\", elem.data);\n\n                        // const currentMonth\n                        // const lastMonthSum\n\n                        const updated = Object.assign(companyToUpdate, {\n                            suma: sum,\n                            avrg: sum / elem.data.incomes.length,\n                        });\n\n                        return updated;\n                    });\n\n                    changeDisplayedCompanies(updatedCompanies);\n                })\n            )\n            .catch((errors) => {\n                // react on errors.\n            });\n    }, [companies, offset, displayedElementsNumber]);\n\n    console.log(\"render\", displayedCompanies);\n\n    return (\n        <div className=\"App\">\n            <div>\n                ile na stronie\n                <select\n                    onChange={(event) =>\n                        changeDisplayedElementsNumber(\n                            parseInt(event.target.value)\n                        )\n                    }\n                    value={displayedElementsNumber}\n                >\n                    <option value={5}>5</option>\n                    <option value={10}>10</option>\n                    <option value={20}>20</option>\n                </select>\n            </div>\n\n            {isLoading && <h1>loading</h1>}\n            {!isLoading &&\n                displayedCompanies.map((elem) => (\n                    <p key={elem.id}>\n                        id:{elem.id} Income: {Number(elem.suma).toFixed(2)}{\" \"}\n                        Å›rednia: {Number(elem.avrg).toFixed(2)}\n                    </p>\n                ))}\n\n            <div>\n                <button\n                    onClick={() =>\n                        changeOffset(offset - displayedElementsNumber)\n                    }\n                >\n                    Offset -{displayedElementsNumber}\n                </button>\n                <button\n                    onClick={() =>\n                        changeOffset(offset + displayedElementsNumber)\n                    }\n                >\n                    Offset +{displayedElementsNumber}\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}