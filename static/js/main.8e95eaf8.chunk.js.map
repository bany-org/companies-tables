{"version":3,"sources":["components/PaginationBar/PaginationBar.js","components/TableHeader/TableHeader.js","components/Table/Table.js","components/App.js","serviceWorker.js","index.js"],"names":["Bar","styled","div","PaginationBar","changeOffset","offset","itemsNumber","onClick","disabled","parseInt","HeaderBody","TableHeader","Table","companiesData","displayNumber","useState","sortProperty","changeSortProperty","sortDirection","changeSortDirection","filterPhrase","changeFiltePhrase","filterProperty","changeFilterProperty","firmy","zmienFirmy","filteredCompaniesNumber","changeFilteredCompaniesNumber","useEffect","xxx","filter","filterFunction","sort","sortFunction","length","aaa","slice","comp","toString","toLowerCase","includes","a","b","onSortChange","sortProp","onFilterChange","filterProp","filterVal","console","log","type","onChange","e","target","value","map","elem","index","key","id","name","city","totalIncome","averageIncome","lastMonthIncome","AppBody","App","isLoading","changeLoading","companiesList","updateCompaniesList","updateCompaniesData","axios","get","then","res","data","catch","err","all","spread","responses","companiesIncomes","updatedCompanies","companyToUpdate","find","company","sumOfIncomes","incomes","income","Date","date","year","getFullYear","month","getMonth","parseFloat","reduce","prev","curr","Object","assign","Number","toFixed","errors","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8e95eaf8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Bar = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    background-color: lightblue;\r\n    padding: 10px;\r\n`;\r\n\r\nconst PaginationBar = ({ changeOffset, offset, itemsNumber }) => {\r\n    return (\r\n        <Bar>\r\n            <button\r\n                onClick={() => changeOffset(0)}\r\n                disabled={offset === 0 ? true : false}\r\n            >\r\n                First page\r\n            </button>\r\n            <button\r\n                onClick={() => changeOffset(offset - 20)}\r\n                disabled={offset - 20 < 0 ? true : false}\r\n            >\r\n                Prev\r\n            </button>\r\n            <div>\r\n                Page:\r\n                {parseInt(offset / 20 + 1.5)}\r\n                Results: {itemsNumber}\r\n            </div>\r\n            <button\r\n                onClick={() => changeOffset(offset + 20)}\r\n                disabled={offset >= itemsNumber - 20 ? true : false}\r\n            >\r\n                Next\r\n            </button>\r\n            <button\r\n                onClick={() => changeOffset(itemsNumber - 20)}\r\n                disabled={offset >= itemsNumber - 20 ? true : false}\r\n            >\r\n                Last\r\n            </button>\r\n        </Bar>\r\n    );\r\n};\r\n\r\nexport default PaginationBar;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HeaderBody = styled.div`\r\n    display: flex;\r\n    justify-content: left;\r\n    background-color: lightblue;\r\n    padding: 10px;\r\n`;\r\n\r\nconst TableHeader = () => {\r\n    return <HeaderBody>Header</HeaderBody>;\r\n};\r\n\r\nexport default TableHeader;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport PaginationBar from \"../PaginationBar/PaginationBar\";\r\nimport TableHeader from \"../TableHeader/TableHeader\";\r\n\r\nconst Table = ({ companiesData, displayNumber }) => {\r\n    const [sortProperty, changeSortProperty] = useState(null);\r\n    const [sortDirection, changeSortDirection] = useState(null);\r\n    const [filterPhrase, changeFiltePhrase] = useState();\r\n    const [filterProperty, changeFilterProperty] = useState();\r\n    const [firmy, zmienFirmy] = useState([...companiesData]);\r\n    const [offset, changeOffset] = useState(0);\r\n    const [filteredCompaniesNumber, changeFilteredCompaniesNumber] = useState(\r\n        20\r\n    );\r\n\r\n    useEffect(() => {\r\n        let xxx = [...companiesData];\r\n\r\n        if (filterProperty) {\r\n            xxx = xxx.filter(filterFunction);\r\n        }\r\n\r\n        if (sortProperty) {\r\n            xxx.sort(sortFunction);\r\n        }\r\n\r\n        changeFilteredCompaniesNumber(xxx.length);\r\n\r\n        const aaa = xxx.slice(offset, offset + 20);\r\n\r\n        zmienFirmy(aaa);\r\n    }, [filterPhrase, filterProperty, sortDirection, sortProperty, offset]);\r\n\r\n    const filterFunction = (comp) => {\r\n        if (filterPhrase === \"\") {\r\n            return true;\r\n        }\r\n\r\n        return comp[filterProperty]\r\n            .toString()\r\n            .toLowerCase()\r\n\r\n            .includes(filterPhrase);\r\n    };\r\n\r\n    const sortFunction = (a, b) => {\r\n        return sortDirection === \"ASC\"\r\n            ? a[sortProperty] > b[sortProperty]\r\n                ? 1\r\n                : -1\r\n            : a[sortProperty] < b[sortProperty]\r\n            ? 1\r\n            : -1;\r\n    };\r\n\r\n    const onSortChange = (sortProp) => {\r\n        if (sortProperty === sortProp) {\r\n            if (sortDirection === \"ASC\") {\r\n                changeSortDirection(\"DESC\");\r\n            } else if (sortDirection === \"DESC\") {\r\n                changeSortDirection(null);\r\n                changeSortProperty(null);\r\n            } else {\r\n                changeSortDirection(\"ASC\");\r\n            }\r\n        } else {\r\n            changeSortDirection(\"ASC\");\r\n            changeSortProperty(sortProp);\r\n        }\r\n    };\r\n\r\n    const onFilterChange = (filterProp, filterVal) => {\r\n        changeOffset(0);\r\n        changeFilterProperty(filterProp);\r\n        changeFiltePhrase(filterVal);\r\n    };\r\n\r\n    console.log(\"firmy\", firmy);\r\n\r\n    return (\r\n        <>\r\n            <TableHeader />\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <td>Lp</td>\r\n                        <td onClick={() => onSortChange(\"name\")}>\r\n                            Name\r\n                            {sortProperty === \"name\" ? sortDirection : null}\r\n                        </td>\r\n                        <td onClick={() => onSortChange(\"city\")}>\r\n                            City\r\n                            {sortProperty === \"city\" ? sortDirection : null}\r\n                        </td>\r\n                        <td onClick={() => onSortChange(\"totalIncome\")}>\r\n                            Total Income\r\n                            {sortProperty === \"totalIncome\"\r\n                                ? sortDirection\r\n                                : null}\r\n                        </td>\r\n                        <td onClick={() => onSortChange(\"averageIncome\")}>\r\n                            Average Income\r\n                            {sortProperty === \"averageIncome\"\r\n                                ? sortDirection\r\n                                : null}\r\n                        </td>\r\n                        <td onClick={() => onSortChange(\"lastMonthIncome\")}>\r\n                            Last month income\r\n                            {sortProperty === \"lastMonthIncome\"\r\n                                ? sortDirection\r\n                                : null}\r\n                        </td>\r\n                        <td onClick={() => onSortChange(\"id\")}>\r\n                            Id\r\n                            {sortProperty === \"id\" ? sortDirection : null}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td></td>\r\n                        <td>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(e) =>\r\n                                    onFilterChange(\r\n                                        \"name\",\r\n                                        e.target.value.toLowerCase()\r\n                                    )\r\n                                }\r\n                                value={\r\n                                    filterProperty !== \"name\"\r\n                                        ? \"\"\r\n                                        : filterPhrase\r\n                                }\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(e) =>\r\n                                    onFilterChange(\r\n                                        \"city\",\r\n                                        e.target.value.toLowerCase()\r\n                                    )\r\n                                }\r\n                                value={\r\n                                    filterProperty !== \"city\"\r\n                                        ? \"\"\r\n                                        : filterPhrase\r\n                                }\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(e) =>\r\n                                    onFilterChange(\r\n                                        \"totalIncome\",\r\n                                        e.target.value.toLowerCase()\r\n                                    )\r\n                                }\r\n                                value={\r\n                                    filterProperty !== \"totalIncome\"\r\n                                        ? \"\"\r\n                                        : filterPhrase\r\n                                }\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(e) =>\r\n                                    onFilterChange(\r\n                                        \"averageIncome\",\r\n                                        e.target.value.toLowerCase()\r\n                                    )\r\n                                }\r\n                                value={\r\n                                    filterProperty !== \"averageIncome\"\r\n                                        ? \"\"\r\n                                        : filterPhrase\r\n                                }\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(e) =>\r\n                                    onFilterChange(\r\n                                        \"lastMonthIncome\",\r\n                                        e.target.value.toLowerCase()\r\n                                    )\r\n                                }\r\n                                value={\r\n                                    filterProperty !== \"lastMonthIncome\"\r\n                                        ? \"\"\r\n                                        : filterPhrase\r\n                                }\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(e) =>\r\n                                    onFilterChange(\r\n                                        \"id\",\r\n                                        e.target.value.toLowerCase()\r\n                                    )\r\n                                }\r\n                                value={\r\n                                    filterProperty !== \"id\" ? \"\" : filterPhrase\r\n                                }\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {firmy.map((elem, index) => (\r\n                        <tr key={elem.id}>\r\n                            <td>{offset + index + 1}</td>\r\n                            <td>{elem.name}</td>\r\n                            <td>{elem.city}</td>\r\n                            <td>{elem.totalIncome}</td>\r\n                            <td>{elem.averageIncome}</td>\r\n                            <td>{elem.lastMonthIncome}</td>\r\n                            <td>{elem.id}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            <PaginationBar\r\n                changeOffset={changeOffset}\r\n                offset={offset}\r\n                itemsNumber={filteredCompaniesNumber}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Table from \"./Table/Table\";\r\nimport PaginationBar from \"./PaginationBar/PaginationBar\";\r\nimport TableHeader from \"./TableHeader/TableHeader\";\r\n\r\nconst AppBody = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 10px;\r\n`;\r\n\r\nfunction App() {\r\n    const [isLoading, changeLoading] = useState(true);\r\n    const [companiesList, updateCompaniesList] = useState([]);\r\n    const [companiesData, updateCompaniesData] = useState([]);\r\n    const [displayNumber, changeDisplayNumber] = useState(20);\r\n    // const [offset, changeOffset] = useState(0);\r\n\r\n    useEffect(() => {\r\n        changeLoading(true);\r\n        axios\r\n            .get(`https://recruitment.hal.skygate.io/companies`)\r\n            .then((res) => {\r\n                updateCompaniesList(res.data);\r\n                changeLoading(false);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        changeLoading(true);\r\n        axios\r\n            .all(\r\n                companiesList.map((elem) =>\r\n                    axios.get(\r\n                        `https://recruitment.hal.skygate.io/incomes/${elem.id}`\r\n                    )\r\n                )\r\n            )\r\n            .then(\r\n                axios.spread((...responses) => {\r\n                    const companiesIncomes = responses;\r\n\r\n                    const updatedCompanies = companiesIncomes.map((elem) => {\r\n                        const companyToUpdate = companiesList.find(\r\n                            (company) => company.id === elem.data.id\r\n                        );\r\n\r\n                        let lastMonthIncome = 0;\r\n\r\n                        const sumOfIncomes = elem.data.incomes\r\n                            .map((income) => {\r\n                                const data = new Date(income.date);\r\n\r\n                                const year = data.getFullYear();\r\n                                const month = data.getMonth();\r\n\r\n                                if (\r\n                                    year === new Date().getFullYear() &&\r\n                                    month === 0 // month === new Date().getMonth()\r\n                                ) {\r\n                                    lastMonthIncome += parseFloat(income.value);\r\n                                    console.log(\r\n                                        \"mapa\",\r\n                                        lastMonthIncome,\r\n                                        income.value\r\n                                    );\r\n                                }\r\n\r\n                                return income.value;\r\n                            })\r\n                            .reduce(\r\n                                (prev, curr) =>\r\n                                    parseFloat(prev) + parseFloat(curr)\r\n                            );\r\n\r\n                        const updated = Object.assign(companyToUpdate, {\r\n                            totalIncome: Number(sumOfIncomes).toFixed(2),\r\n                            averageIncome: Number(\r\n                                sumOfIncomes / elem.data.incomes.length\r\n                            ).toFixed(2),\r\n                            lastMonthIncome: Number(lastMonthIncome).toFixed(2),\r\n                        });\r\n\r\n                        return updated;\r\n                    });\r\n\r\n                    updateCompaniesData(updatedCompanies);\r\n                    changeLoading(false);\r\n                })\r\n            )\r\n            .catch((errors) => {\r\n                console.log(errors);\r\n                changeLoading(false);\r\n            });\r\n    }, [companiesList]);\r\n\r\n    return (\r\n        <AppBody>\r\n            {isLoading && <h1>loading</h1>}\r\n            {!isLoading && <Table companiesData={companiesData} />}\r\n        </AppBody>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}